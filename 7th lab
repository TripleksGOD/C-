#include <iostream>
#include <string>
#include "Header.h"

struct node
{
	int data;
	node* left;
	node* right;
};

node* NewNode(int data)
{
	node* Node = new node();
	Node->data = data;
	Node->left = nullptr;
	Node->right = nullptr;

	return (Node);
}

int EQUAL(node* a, node* b)
{
	if (a == NULL && b == NULL)
	{
		return 1;
	}

	if (a != NULL && b != NULL)
	{
		return (a->data == b->data && EQUAL(a->left, b->left) && EQUAL(a->right, b->right));
	}
	return 0;
}

/*void MakeTree(node** Node, int n)
{
	node** ptr;
	srand(time(nullptr) * 1000);
	while (n > 0)
	{
		ptr = Node;
		while (*ptr != nullptr)
		{
			if ((double)rand() / RAND_MAX < 0.5)
			{
				ptr = &((*ptr)->left);
			}
			else
			{
				ptr = &((*ptr)->right);
			}
		}
		(*ptr) = new node();

		std::cout << "Enter value: ";
		std::cin >> (*ptr)->data;
		n--;
	}
}
*/

int main()
{

	node *root1 = NewNode(1);
	node *root2 = NewNode(1);

	root1->left = NewNode(2);
	root1->right = NewNode(3);
	root1->left->left = NewNode(4);
	root1->left->right = NewNode(5);
	root1->right->right = NewNode(6);
	root1->right->left = NewNode(7);

	//       1
	//    /     \ 
	//   2       3
	//  / \     / \
	// 4   5   7   6

	root2->left = NewNode(2);
	root2->right = NewNode(3);
	root2->left->left = NewNode(4);
	root2->left->right = NewNode(5);
	root2->right->right = NewNode(6);

	//       1
	//    /     \ 
	//   2       3
	//  / \       \
	// 4   5       6

	if (EQUAL(root1, root2))
	{
		std::cout << "They are identical.";
	}
	else
	{
		std::cout << "They are not identical.";
	}

	return 0;
}

